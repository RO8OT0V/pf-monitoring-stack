pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'monitoring-stack'
        STACK_PREFIX = "pf-monitoring-${BRANCH_NAME.toLowerCase().replaceAll(/[^a-z0-9]/, '-')}"
    }
    
    stages {
        stage('üåø Branch Strategy') {
            steps {
                script {
                    switch(BRANCH_NAME) {
                        case 'main':
                        case 'master':
                            echo "üöÄ Production deployment for ${BRANCH_NAME}"
                            env.ENVIRONMENT = 'production'
                            env.PROMETHEUS_PORT = '9100'
                            env.GRAFANA_PORT = '9101'
                            break
                            
                        case 'develop':
                            echo "üß™ Development deployment for ${BRANCH_NAME}"
                            env.ENVIRONMENT = 'development'
                            env.PROMETHEUS_PORT = '9110'
                            env.GRAFANA_PORT = '9111'
                            break
                            
                        default:
                            if (BRANCH_NAME.startsWith('feature/')) {
                                echo "üîß Feature branch deployment for ${BRANCH_NAME}"
                                env.ENVIRONMENT = 'feature'
                                env.PROMETHEUS_PORT = '9120'
                                env.GRAFANA_PORT = '9121'
                            } else {
                                echo "‚ö†Ô∏è Unknown branch pattern: ${BRANCH_NAME}"
                                env.ENVIRONMENT = 'unknown'
                            }
                            break
                    }
                }
            }
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ stages...
        stage('üöÄ Deploy') {
            steps {
                sh '''
                    echo "üåç Deploying to ${ENVIRONMENT} environment"
                    echo "üîó Prometheus will be available on port: ${PROMETHEUS_PORT}"
                    echo "üìä Grafana will be available on port: ${GRAFANA_PORT}"
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º environment-specific docker-compose
                    envsubst < docker-compose.yml > docker-compose.${ENVIRONMENT}.yml
                    docker-compose -f docker-compose.${ENVIRONMENT}.yml -p ${STACK_PREFIX} up -d
                '''
            }
        }
    }
}
